name: Docker CI/CD Pipeline

on:
  pull_request:
    branches: [ feature/CICD-setup ]
  push:
    branches: [ feature/CICD-setup ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - run: |
          echo "DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}"
          echo "DOCKER_ACCESS_TOKEN: ${{ secrets.DOCKER_ACCESS_TOKEN }}"
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_ACCESS_TOKEN: ${{ secrets.DOCKER_ACCESS_TOKEN }}

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/goji:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VPS_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts
      - name: Deploy and run Docker container
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
            echo "🛑 Stopping existing container (if any)..."
            docker stop goji || true
          
            echo "🧹 Removing old container (if any)..."
            docker rm goji || true
          
            echo "🚀 Starting pull container..."
            docker pull ${{ secrets.DOCKER_USERNAME }}/goji:latest
          
            echo "🚀 Starting new container..."
            docker run -d --name goji -p 3000:3000 ${{ secrets.DOCKER_USERNAME }}/goji:latest
          
            echo "📡 Checking container status..."
            docker ps --filter "name=goji"
          
            echo "🔍 Validating Nginx config..."
            sudo nginx -t
          
            echo "🔄 Restarting Nginx..."
            sudo systemctl restart nginx
          
            echo "✅ Nginx status:"
            sudo systemctl status nginx --no-pager
          EOF